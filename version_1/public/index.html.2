<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Custom Watch Party</title>

  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <!-- Optional: Font Awesome for Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

  <style>
    /* Custom Styles */
    body {
      background-color: #f8f9fa;
    }
    #video-container {
      position: relative;
      width: 100%;
      max-width: 800px;
      margin: auto;
      padding-top: 20px;
    }
    video {
      width: 100%;
      border-radius: 10px;
      border: 1px solid #dee2e6;
      background-color: #000;
    }
    #chat-container {
      width: 100%;
      max-width: 800px;
      margin: 20px auto;
    }
    #messages {
      height: 300px;
      overflow-y: scroll;
      background-color: #ffffff;
      padding: 15px;
      border: 1px solid #dee2e6;
      border-radius: 5px;
    }
    #users {
      list-style: none;
      padding: 0;
    }
    #users li {
      margin-bottom: 5px;
    }
    .message {
      margin-bottom: 10px;
    }
    .message .username {
      font-weight: bold;
    }
    .hidden {
      display: none;
    }
  </style>
</head>
<body>

  <!-- Container for Room and User Setup -->
  <div id="setup-container" class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-6">
        <div class="card shadow-sm">
          <div class="card-body">
            <h3 class="card-title text-center mb-4">Join a Watch Party</h3>

            <!-- Username Input -->
            <div class="mb-3">
              <label for="username-input" class="form-label">Enter Your Username</label>
              <input type="text" class="form-control" id="username-input" placeholder="e.g., JohnDoe" required>
            </div>

            <!-- Room ID Input -->
            <div class="mb-3">
              <label for="room-input" class="form-label">Room ID</label>
              <input type="text" class="form-control" id="room-input" placeholder="Enter Room ID or leave blank to create one">
            </div>

            <!-- Buttons to Create or Join Room -->
            <div class="d-grid gap-2">
              <button id="create-room-button" class="btn btn-primary">Create Room</button>
              <button id="join-room-button" class="btn btn-success">Join Room</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Container for Video and Chat (Initially Hidden) -->
  <div id="main-container" class="container mt-4 hidden">
    <div class="row">
      <!-- Video Player -->
      <div class="col-md-8">
        <div id="video-container">
          <video id="video" controls>
            <!-- Source will be set by HLS.js -->
            Your browser does not support the video tag.
          </video>
        </div>
      </div>

      <!-- Chat and Users -->
      <div class="col-md-4">
        <!-- Chat Section -->
        <div id="chat-container">
          <h5>Chat</h5>
          <div id="messages" class="mb-3"></div>
          <form id="message-form" class="d-flex">
            <input id="message-input" type="text" class="form-control me-2" placeholder="Type a message..." autocomplete="off" required>
            <button type="submit" class="btn btn-outline-secondary">Send</button>
          </form>
        </div>

        <!-- Users Section -->
        <div id="users-container" class="mt-4">
          <h5>Users</h5>
          <ul id="users" class="list-group">
            <!-- Usernames will be appended here -->
          </ul>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap 5 JS Bundle (includes Popper) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- HLS.js for HLS Support -->
  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>

  <!-- Socket.io -->
  <script src="/socket.io/socket.io.js"></script>

  <!-- Simple-Peer for WebRTC -->
  <script src="https://unpkg.com/simple-peer@9.11.1/simplepeer.min.js"></script>

  <script>
    // Initialize Socket.io
    const socket = io();

    // DOM Elements
    const setupContainer = document.getElementById('setup-container');
    const mainContainer = document.getElementById('main-container');
    const createRoomButton = document.getElementById('create-room-button');
    const joinRoomButton = document.getElementById('join-room-button');
    const roomInput = document.getElementById('room-input');
    const usernameInput = document.getElementById('username-input');

    const video = document.getElementById('video');

    const messageForm = document.getElementById('message-form');
    const messageInput = document.getElementById('message-input');
    const messagesContainer = document.getElementById('messages');

    const usersList = document.getElementById('users');

    // State Variables
    let roomID = null;
    let username = null;
    let peers = {}; // Connected peers
    let isSyncing = false; // Flag to prevent feedback loops

    // Function to Generate a Random Room ID
    function generateRoomID() {
      return Math.random().toString(36).substr(2, 9);
    }

    // Function to Append Messages to Chat
    function appendMessage(msg, sender = 'System') {
      const messageElement = document.createElement('div');
      messageElement.classList.add('message');
      messageElement.innerHTML = `<span class="username">${sender}:</span> ${msg}`;
      messagesContainer.appendChild(messageElement);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // Function to Update Users List
    function updateUsersList(users) {
      usersList.innerHTML = '';
      users.forEach(user => {
        const userItem = document.createElement('li');
        userItem.classList.add('list-group-item');
        userItem.textContent = user;
        usersList.appendChild(userItem);
      });
    }

    // Event Listener: Create Room
    createRoomButton.addEventListener('click', () => {
      const enteredUsername = usernameInput.value.trim();
      if (!enteredUsername) {
        alert('Please enter a username.');
        return;
      }
      username = enteredUsername;
      roomID = generateRoomID();
      joinRoom(roomID);
      appendMessage(`Room created with ID: ${roomID}`);
    });

    // Event Listener: Join Room
    joinRoomButton.addEventListener('click', () => {
      const enteredUsername = usernameInput.value.trim();
      const enteredRoomID = roomInput.value.trim();
      if (!enteredUsername) {
        alert('Please enter a username.');
        return;
      }
      if (!enteredRoomID) {
        alert('Please enter a Room ID to join.');
        return;
      }
      username = enteredUsername;
      roomID = enteredRoomID;
      joinRoom(roomID);
    });

    // Function to Join a Room
    function joinRoom(room) {
      setupContainer.classList.add('hidden');
      mainContainer.classList.remove('hidden');
      socket.emit('join-room', { roomID: room, username: username });
    }

    // Handle Connection to Room
    socket.on('connect', () => {
      console.log('Connected to server');
    });

    // Handle User Joined
    socket.on('user-joined', ({ socketID, username }) => {
      appendMessage(`${username} has joined the room.`);
      updateUsersList([...socket.connectedUsers.values()]);
      // Initialize a peer connection
      initiatePeerConnection(socketID, true);
    });

    // Handle User Disconnected
    socket.on('user-disconnected', ({ socketID, username }) => {
      appendMessage(`${username} has left the room.`);
      if (peers[socketID]) {
        peers[socketID].destroy();
        delete peers[socketID];
      }
      updateUsersList([...socket.connectedUsers.values()]);
    });

    // Handle Receiving Signal Data
    socket.on('signal-data', ({ from, signal }) => {
      if (peers[from]) {
        peers[from].signal(signal);
      }
    });

    // Playback synchronization
    video.addEventListener('play', () => {
      if (!isSyncing) {
        socket.emit('playback', { action: 'play', currentTime: video.currentTime });
      }
    });

    video.addEventListener('pause', () => {
      if (!isSyncing) {
        socket.emit('playback', { action: 'pause', currentTime: video.currentTime });
      }
    });

    video.addEventListener('seeked', () => {
      if (!isSyncing) {
        socket.emit('playback', { action: 'seek', currentTime: video.currentTime });
      }
    });

    socket.on('playback', (data) => {
      isSyncing = true;
      if (data.action === 'play') {
        video.currentTime = data.currentTime;
        video.play();
      } else if (data.action === 'pause') {
        video.currentTime = data.currentTime;
        video.pause();
      } else if (data.action === 'seek') {
        video.currentTime = data.currentTime;
      }
      isSyncing = false;
    });

    // Chat functionality
    messageForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const msg = messageInput.value.trim();
      if (msg) {
        appendMessage(msg, username);
        socket.emit('chat-message', { roomID: roomID, message: msg, username: username });
        messageInput.value = '';
      }
    });

    socket.on('chat-message', ({ message, username: sender }) => {
      appendMessage(message, sender);
    });

    // Handle Updated Users List
    socket.on('update-users', (users) => {
      updateUsersList(users);
    });

    // Function to Initiate Peer Connection
    function initiatePeerConnection(socketID, initiator = false) {
      const peer = new SimplePeer({
        initiator: initiator,
        trickle: false
      });

      peer.on('signal', (data) => {
        socket.emit('signal-data', { roomID: roomID, to: socketID, signal: data });
      });

      peer.on('connect', () => {
        console.log(`Connected to peer: ${socketID}`);
      });

      peer.on('data', (data) => {
        // Handle data received from peers if needed
        console.log(`Data from ${socketID}:`, data);
      });

      peer.on('error', (err) => {
        console.error(`Peer error with ${socketID}:`, err);
      });

      peer.on('close', () => {
        console.log(`Peer connection closed with ${socketID}`);
      });

      peers[socketID] = peer;
    }

    // HLS.js Integration
    document.addEventListener('DOMContentLoaded', () => {
      // Listen for the 'stream-url' event to get the HLS stream URL
      socket.on('stream-url', ({ streamURL }) => {
        console.log('Received stream URL:', streamURL);
        loadStream(streamURL);
      });

      function loadStream(streamURL) {
        if (Hls.isSupported()) {
          const hls = new Hls();
          hls.loadSource(streamURL);
          hls.attachMedia(video);
          hls.on(Hls.Events.MANIFEST_PARSED, () => {
            console.log('HLS stream loaded.');
            // Optionally, you can auto-play after stream is loaded
            // video.play();
          });
        }
        else if (video.canPlayType('application/vnd.apple.mpegurl')) {
          video.src = streamURL;
        }
        else {
          console.error('HLS not supported in this browser.');
          appendMessage('Your browser does not support HLS streaming.', 'System');
        }
      }
    });
  </script>
</body>
</html>
