const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: '*',  // For development; restrict in production
    methods: ['GET', 'POST']
  }
});

// Serve static files (frontend)
app.use(express.static(path.join(__dirname, 'public')));

// Handle socket connections
io.on('connection', (socket) => {
  console.log('a user connected:', socket.id);

  // Join a room
  socket.on('join-room', (roomID) => {
    socket.join(roomID);
    console.log(`Socket ${socket.id} joined room ${roomID}`);

    // Notify others in the room
    socket.to(roomID).emit('user-connected', socket.id);

    // Handle signaling data
    socket.on('signal', (data) => {
      io.to(data.to).emit('signal', {
        from: socket.id,
        signal: data.signal
      });
    });

    // Handle playback synchronization
    socket.on('playback', (data) => {
      socket.to(roomID).emit('playback', data);
    });

    // Handle chat messages
    socket.on('chat-message', (msg) => {
      io.to(roomID).emit('chat-message', msg);
    });

    // Handle disconnections
    socket.on('disconnect', () => {
      console.log('user disconnected:', socket.id);
      socket.to(roomID).emit('user-disconnected', socket.id);
    });
  });
});

// Start the server
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
